Title: Hacking with Node.js
Author: by Nipun Saggar
Copyright: 2012 Yahoo! Inc., licensed under the BSD License.
Footer: Yahoo! <strong>HackU</strong> 2012

%css
/* sudo hackday */

@import url("http://fonts.googleapis.com/css?family=Dosis:400,800");

.deck-container {
    font-family: Dosis, sans-serif;
}

.deck-container > .slide {
    background: #fff;
    color: #000;
    /* reset padding */
    padding: 0;
    width: 100%;
    font-size: 200%;
}

.deck-container > .title {
    padding-top: 1em !important;
    font-size: 4em;
    background: #2F81C2;
}

.deck-container > .cover {
    padding-top: 1em !important;
    font-size: 4em;
    background: #2F81C2;
}

.csstransforms .deck-container .title > * {
    -webkit-transform: rotate(-3deg); 
    -moz-transform: rotate(-3deg); 
}

.title h1 {
    text-align: left;
    margin: 0;
}

.title p {
    margin: 0.25em 0;
    font-size: 1.25em;
    color: #fff;
}

.slide h1 {
    background: #1C2C56;
    color: #fff;
    padding: 20px;
    margin: 0;
    font-weight: 800;
}

.contact h2 {
    background: #1C2C56;
    color: #fff;
    padding: 20px;
    margin: 0 0 0.25em 0;
    display: inline-block;
    font-weight: 800;
    font-size: 1em;
}

.deck-container .title h1 {
    padding: 20px;
    margin: 0;
}

/* add padding to children */

.slide h2, .slide p, .slide pre {
    padding: 0 20px;
}

/* new code style */

#bd code, #bd pre {
    background: #efefef;
    text-shadow: none;
}

#bd pre {
    margin-left: 25px;
}

.slide a {
    color: #333;
}

/* end hackday */

#ft {
    position: absolute;
    bottom: 0;
    line-height: 28px;
}

/*
.title {
    background: url(title.png);
    padding-top: 170px;
    padding-left: 30px;
    height: 580px;
    width: 990px;
    border: 1px solid #8c00a8;
    border-width: 0 1px 1px 0;
    font-size: 64px;
}

.title * {
    width: 900px;
    font-weight: 100;
    border-bottom: 1px solid #fff;
}
*/

.inline li {
    float: left;
    list-style: none;
    padding: 10px;
    margin: 7px;
    background: #232323;
    font-weight: bold;
    font-size: 180%;
}

.inline li:last-child {
    background: #343434;
}

.inline a {
    text-align: center;
}

.bigtext p,
.bigtext li {
    font-size: 200% !important;
}

.contact ul {
    font-size: 150%;
    margin: 0;
    padding: 0.5em;
    display: inline-block;
    border: 1px solid #2F81C2;
    background: #87CBFF;
}

.contact li a {
    color: #1C2C56;
    text-decoration: none;
}

.contact li {
    margin: 0;
    padding: 0;
    list-style: none;
}
    
iframe {
    width: 100%;
    height: 90%;
    border: 0;
}

.deck-container h2 {
    border-color: #1C2C56;
}
%end

# JavaScript

Prototype-based, object-oriented scripting language.

 - Web sites
 - Widgets
 - Browser extensions

Most popular language on GitHub: <https://github.com/languages>

# JavaScript Everywhere

JavaScript isn't found on just websites.

 - Mobiles & Tablets [on{X}](https://www.onx.ms/) 
 - Television sets via [Yahoo! Connected TV](http://connectedtv.yahoo.com)
 - [Universal remote controls](http://pronto.projgs.sk/down/DevelopersGuide_ProntoScript_Jan08.pdf)
 
<p class="slide">Finally, there's Server-Side JavaScript.</p>

# Server-Side JavaScript 

Started in 1996: [Netscape LiveWire](http://docsrv.sco.com/INT_LiveWire/).

Refined since then: AppJet, [EtherPad](http://etherpad.com/), [CommonJS](http://commonjs.org/).

Used in Yahoo!'s [YQL](http://developer.yahoo.com/yql/).

# Node.js

Evented I/O for V8 JavaScript.

<img src="nodejs.png" style="padding: 15px; background: #fff; float: right;">

Easily create scalable network apps, like web servers.

Created in 2009.

Uses the V8 JavaScript engine from Google.

<http://nodejs.org/>

!SLIDE title

Node.js is used by <span class="slide">
Joyent,
</span>
<span class="slide">
Yahoo!,
</span>
<span class="slide">
Microsoft,
</span>
<span class="slide">
LinkedIn,
</span>
<span class="slide">
Uber,
</span>
<span class="slide">
Mozilla,
</span>
<span class="slide">
Voxer,
</span>
<span class="slide">
AT&T
</span>
<span class="slide">
& your hack.
</span>

!SLIDE bigtext title

Evented I/O for JavaScript.

# Event driven non blocking model

<pre class="prettyprint">
console.log("Leonidas:Oh, I’ve chosen my words carefully, Persian. Perhaps you should have done the same.?");
setTimeout(function() {
    console.log("Leonidas:This is Sparta!");
}, 1000);
console.log("Persian Messenger: This is Blasphemy! This is Madness!");
</pre>

<pre class="slide prettyprint">
Leonidas:Oh, I’ve chosen my words carefully, Persian. Perhaps you should have done the same.?
Persian Messenger: This is Blasphemy! This is Madness!
Leonidas:This is Sparta!
</pre>
# Nested Callbacks: (a.k.a Inception Style Programming)

<pre class="prettyprint">
var file = "/etc/redhat-release";
fs.stat(file, function(err, stat) {
    if (stat.isFile()) {
        fs.readFile(file, function(err, file) {
            postRequest("http://example.com", file, function (err, response) {
                if (response.status === 200) {
                    db.save(file, function (err) {
                        next();
                    });
                }
            });
        });
    }
});
</pre>

# Better Callbacks

<pre class="prettyprint">
var file = "/etc/redhat-release";

function onPost(err, response) {
    if (response.status !== 200) throw err;
    db.save(file, next);
}

function onRead(err, file) {
    postRequest("http://example.com", file, onPost);
}

function onStat(err, stat) {
    if (stat.isFile()) fs.readFile(file, onRead);
}

fs.stat(file, onStat);
</pre>


!SLIDE bigtext title

Getting Started

# Installing

Easy installers for Windows and OS X.

<http://nodejs.org/#download>

Easily compiled from source on Linux and Solaris.

% <http://bit.ly/howtonode>
% https://github.com/joyent/node/wiki/Installation

# Node.js Package Manager

<img src="npm.png" style="float: right">

Bundled with Node.js.

<http://npmjs.org>

The package manager for Node.js modules.

    npm install modulename
    var foo = require('modulename');

# Play

Type `node` to start a REPL.

% What's a REPL?

    $ node
    > console.log('Hello, Kanpur!');
    Hello, Kanpur!

Control-D to quit.

Start a script file with `node script.js`.

!SLIDE bigtext title

What can you build with Node.js? 

# Node.js applications

 - Games: massively-multiplayer is easy!
 - Chatroom
 - Shared whiteboard
 - Live stock quotes
 - Streaming charts with <http://smoothiecharts.org/>
 - Your hack


!SLIDE bigtext title

Node Recipes 

# Simple Http Server

<pre class="prettyprint">
var http = require('http');

http.createServer(
    function (request, response) {
        response.writeHead(200,
            {'Content-Type': 'text/plain'});
        response.end('Hello World\n');
}).listen(8000);

console.log('Started at
    http://127.0.0.1:8000/');
</pre>

# Socket.IO 

Cross-browser WebSockets API. <http://socket.io/>

`npm install socket.io`

Server
<pre class="prettyprint">
var app = require('http').createServer(handler)
  , io = require('socket.io').listen(app);
app.listen(8080);

function handler (request, response) {
    response.writeHead(200, {'Content-Type': 'text/plain'});
    response.end('Hello World\n');
}
io.sockets.on('connection', function (socket) {
  socket.emit('news', { hello: 'world' });
  socket.on('batman', function (data) {
    console.log(data);
  });
});
</pre>

Client
<pre class="prettyprint">
<html>
    <head>
    <script src="socket.io.js"></script>
    <script>
        var socket = io.connect('http://localhost:8080');
        socket.on('news', function (data) {
            console.log(data);
            socket.emit('batman', { 'enemy': 'joker' });
        });
    </script>
    <body>
    </body>
</html>
</pre>


# Express

Node.js is not a web server, it's a platform to make one.

Flexible web application framework. <http://expressjs.com/>

`npm install express`

<pre class="prettyprint">
var express = require('express');
var app = express();

app.get('/', function(req, res){
    res.send('Yahoo!');
});

app.listen(3000);
</pre>

Router, view rendering, configuration, etc.

# Debugger

<http://nodejs.org/docs/latest/api/debugger.html>

`npm install node-inspector`

Works for any Node.js program. Handy!

    node --debug-brk app.js
    node-inspector

You can now debug your app in WebKit browser.

    node --debug # Enable debug mode
    node --debug-brk # Break on startup

# jsdom

`npm install jsdom`

Implementation of the W3C DOM. Headless browser!

<pre class="prettyprint">
var jsdom = require("jsdom");
jsdom.env("http://nodejs.org/dist/", [
  'http://yui.yahooapis.com/3.5.0/build/simpleyui/simpleyui-min.js'
], function(errors, window) {
  console.log("there have been",
    window.Y.all("a").size(),
    "nodejs releases!");
});
</pre>

<https://github.com/tmpvar/jsdom>

# YUI on Node.js

<img src="yuilogo.png" style="width: 250px; height: 120px; float: right; padding: 10px;">

`npm install yui3`

Run [YUI](http://yuilibrary.com) on Node.js!

<https://github.com/davglass/nodejs-yui3>

<div style="clear:both"></div>

<img src="mojito.png" style="padding: 15px; background: #fff; float: right;">

# High-performance, device-independent HTML5 applications with Yahoo! Mojito.

<http://developer.yahoo.com/cocktails/mojito/>

!SLIDE title bigtext

Talk to the **real world**.

# Serialport

<pre style="font-size: 40%">
  eeeee eeeee eeeee eeee       e  eeeee 
  8   8 8  88 8   8 8          8  8   " 
  8e  8 8   8 8e  8 8eee       8e 8eeee 
  88  8 8   8 88  8 88      e  88    88 
  88  8 8eee8 88ee8 88ee 88 8ee88 8ee88

  eeeee eeee eeeee  e  eeeee e     eeeee eeeee eeeee eeeee 
  8   " 8    8   8  8  8   8 8     8   8 8  88 8   8   8   
  8eeee 8eee 8eee8e 8e 8eee8 8e    8eee8 8   8 8eee8e  8e  
     88 88   88   8 88 88  8 88    88    8   8 88   8  88  
  8ee88 88ee 88   8 88 88  8 88eee 88    8eee8 88   8  88
</pre>

`npm install serialport`

Talk to physical devices, like an Arduino.

 - Interact with sensors
 - Write to LED displays
 - Physical controls: dials, switches, etc.

!SLIDE title bigtext

Get Inspired.

# Log.io

<img src="logio.png" style="float: right">

Real time log monitoring from your browser

<http://logio.org/>

<img src="logio.png" style="float: right">

# Browser Quest

A massively multiplayer HTML 5 game.

<http://browserquest.mozilla.org/>

<img src="browserquest.png" style="float: right">

# Nodeboat

A R/C boat controlled from the web browser.

<http://bit.ly/nodeboat>

<img src="boatduinode." style="float: right">

# Node KO

Get inspired.

 - <http://2011.nodeknockout.com/>
 - <http://2010.nodeknockout.com/>

!SLIDE title contact

<h2>Hacking with Node.js</h2>
<ul>
<li>
<strong>Nipun Saggar</strong> Yahoo! Inc.
</li>
<li>
<span class="slide">Github <a href="https://github.com/nipuns">nipuns</a></span>
</li>

<li>
<span class="slide">Twitter <a href="http://twitter.com/jollyjagga">@jollyjagga</a></span>
</li>

<li>
<span class="slide">Email <a mailto:mail@nipunsaggar.com>mail@nipunsaggar.com</a></span>
</li>

</ul>

!SLIDE title

<img src="yuilogo.png" style="width: 500px; height: 240px; float: right; padding: 10px;">

# About this slideshow
 
 - Code samples: <https://github.com/nipuns/talks/2012/hackuiitk/code
 - Slideshow source: <https://github.com/reid/decks>
 - Slideshow system based on YUI 3 built by @reid: <https://github.com/reid/upstage>
